<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>triflow.core.routines</title>
    
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for triflow.core.routines</h1><div class="highlight"><pre>
<span></span><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># coding=utf8</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">sympy</span> <span class="k">as</span> <span class="nn">sp</span>


<div class="viewcode-block" id="ModelRoutine"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.routines.ModelRoutine">[docs]</a><span class="k">class</span> <span class="nc">ModelRoutine</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">pars</span><span class="p">,</span> <span class="n">ufunc</span><span class="p">,</span>
                 <span class="n">reduced</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pars</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">pars</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="s1">&#39;periodic&#39;</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span> <span class="o">=</span> <span class="n">matrix</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_ufunc</span> <span class="o">=</span> <span class="n">ufunc</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">sp</span><span class="o">.</span><span class="n">Matrix</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">matrix</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span><span class="o">.</span><span class="fm">__repr__</span><span class="p">()</span></div>


<div class="viewcode-block" id="F_Routine"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.routines.F_Routine">[docs]</a><span class="k">class</span> <span class="nc">F_Routine</span><span class="p">(</span><span class="n">ModelRoutine</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Compute the right hand side of the dynamical system</span>
<span class="sd">      :math:`\frac{\partial U}{\partial t} = F(U)`</span>

<span class="sd">      Parameters</span>
<span class="sd">      ----------</span>
<span class="sd">      fields : triflow.Fields</span>
<span class="sd">          triflow fields container generated by a triflow.Model containing the actual state of the dependent variables and helper functions.</span>
<span class="sd">      pars : dict</span>
<span class="sd">          dictionnary with the different physical parameters of the model and the &#39;periodic&#39; key.</span>

<span class="sd">      Returns</span>
<span class="sd">      -------</span>
<span class="sd">      numpy.ndarray</span>
<span class="sd">          flat array containing the right hand side of the dynamical system.</span>
<span class="sd">      &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fields</span><span class="p">,</span> <span class="n">pars</span><span class="p">):</span>
        <span class="n">uargs</span> <span class="o">=</span> <span class="p">[</span><span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="o">*</span><span class="p">[</span><span class="n">fields</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">]]</span>
        <span class="n">pargs</span> <span class="o">=</span> <span class="p">[</span><span class="n">pars</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">+</span> <span class="n">fields</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">key</span> <span class="o">!=</span> <span class="s1">&#39;periodic&#39;</span> <span class="k">else</span> <span class="n">pars</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
                 <span class="k">for</span> <span class="n">key</span>
                 <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pars</span><span class="p">]</span>
        <span class="n">F</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_ufunc</span><span class="p">(</span><span class="o">*</span><span class="n">uargs</span><span class="p">,</span> <span class="o">*</span><span class="n">pargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">F</span>

<div class="viewcode-block" id="F_Routine.diff_approx"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.routines.F_Routine.diff_approx">[docs]</a>    <span class="k">def</span> <span class="nf">diff_approx</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fields</span><span class="p">,</span> <span class="n">pars</span><span class="p">,</span> <span class="n">eps</span><span class="o">=</span><span class="mf">1E-8</span><span class="p">):</span>
        <span class="n">nvar</span><span class="p">,</span> <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">fields</span><span class="o">.</span><span class="n">dependent_variables</span><span class="p">),</span> <span class="n">fields</span><span class="o">.</span><span class="n">size</span>
        <span class="n">fpars</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">pars</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pars</span><span class="p">}</span>
        <span class="n">fpars</span><span class="p">[</span><span class="s1">&#39;dx&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">size</span>
        <span class="n">J</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">N</span> <span class="o">*</span> <span class="n">nvar</span><span class="p">,</span> <span class="n">N</span> <span class="o">*</span> <span class="n">nvar</span><span class="p">))</span>
        <span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">indices</span><span class="p">(</span><span class="n">fields</span><span class="o">.</span><span class="n">uarray</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">var_index</span><span class="p">,</span> <span class="n">node_index</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ravel</span><span class="p">,</span>
                                                             <span class="n">indices</span><span class="p">))):</span>
            <span class="n">fields_plus</span> <span class="o">=</span> <span class="n">fields</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
            <span class="n">fields_plus</span><span class="o">.</span><span class="n">uarray</span><span class="p">[</span><span class="n">var_index</span><span class="p">,</span> <span class="n">node_index</span><span class="p">]</span> <span class="o">+=</span> <span class="n">eps</span>
            <span class="n">fields_moins</span> <span class="o">=</span> <span class="n">fields</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
            <span class="n">fields_moins</span><span class="o">.</span><span class="n">uarray</span><span class="p">[</span><span class="n">var_index</span><span class="p">,</span> <span class="n">node_index</span><span class="p">]</span> <span class="o">-=</span> <span class="n">eps</span>
            <span class="n">Fplus</span> <span class="o">=</span> <span class="bp">self</span><span class="p">(</span><span class="n">fields_plus</span><span class="p">,</span> <span class="n">pars</span><span class="p">)</span>
            <span class="n">Fmoins</span> <span class="o">=</span> <span class="bp">self</span><span class="p">(</span><span class="n">fields_moins</span><span class="p">,</span> <span class="n">pars</span><span class="p">)</span>
            <span class="n">J</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Fplus</span> <span class="o">-</span> <span class="n">Fmoins</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">eps</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">J</span><span class="o">.</span><span class="n">T</span></div></div>


<div class="viewcode-block" id="J_Routine"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.routines.J_Routine">[docs]</a><span class="k">class</span> <span class="nc">J_Routine</span><span class="p">(</span><span class="n">ModelRoutine</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Compute the right hand side of the dynamical system</span>
<span class="sd">      :math:`\frac{\partial U}{\partial t} = F(U)`</span>

<span class="sd">      Parameters</span>
<span class="sd">      ----------</span>
<span class="sd">      fields : triflow.Fields</span>
<span class="sd">          triflow fields container generated by a triflow.Model containing the actual state of the dependent variables and helper functions.</span>
<span class="sd">      pars : dict</span>
<span class="sd">          dictionnary with the different physical parameters of the model and the &#39;periodic&#39; key.</span>
<span class="sd">      sparse : bool, optional, default True</span>
<span class="sd">          whether should the matrix returned as dense or sparse form.</span>

<span class="sd">      Returns</span>
<span class="sd">      -------</span>
<span class="sd">      scipy.sparse.CSC or numpy.ndarray: sparse or dense form (depending of the `sparse` argument) of the Jacobian approximation of the dynamical system right hand side.</span>
<span class="sd">      &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fields</span><span class="p">,</span> <span class="n">pars</span><span class="p">,</span> <span class="n">sparse</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
        <span class="n">uargs</span> <span class="o">=</span> <span class="p">[</span><span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="o">*</span><span class="p">[</span><span class="n">fields</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">]]</span>
        <span class="n">pargs</span> <span class="o">=</span> <span class="p">[</span><span class="n">pars</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">+</span> <span class="n">fields</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">0</span>
                 <span class="k">if</span> <span class="n">key</span> <span class="o">!=</span> <span class="s1">&#39;periodic&#39;</span> <span class="k">else</span> <span class="n">pars</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
                 <span class="k">for</span> <span class="n">key</span>
                 <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pars</span><span class="p">]</span>
        <span class="n">J</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_ufunc</span><span class="p">(</span><span class="o">*</span><span class="n">uargs</span><span class="p">,</span> <span class="o">*</span><span class="n">pargs</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">J</span> <span class="k">if</span> <span class="n">sparse</span> <span class="k">else</span> <span class="n">J</span><span class="o">.</span><span class="n">todense</span><span class="p">()</span></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>