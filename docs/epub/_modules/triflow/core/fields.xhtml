<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>triflow.core.fields</title>
    
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for triflow.core.fields</h1><div class="highlight"><pre>
<span></span><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># coding=utf8</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<div class="viewcode-block" id="BaseFields"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.fields.BaseFields">[docs]</a><span class="k">class</span> <span class="nc">BaseFields</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Specialized container which expose the data as a structured numpy array,</span>
<span class="sd">          give access to the dependants variables and the herlpers function as</span>
<span class="sd">          attributes (as a numpy rec array) and is able to give access to a flat</span>
<span class="sd">          view of the dependent variables only (which is needed by the ode</span>
<span class="sd">          solvers for all the linear algebra manipulation).</span>

<span class="sd">          Parameters</span>
<span class="sd">          ----------</span>
<span class="sd">          **inputs : numpy.array</span>
<span class="sd">              named argument providing x, the dependent variables and the helper functions. All of these are mendatory and a KeyError will be raised if a data is missing.</span>

<span class="sd">          Attributes</span>
<span class="sd">          ----------</span>
<span class="sd">          array : numpy.array</span>
<span class="sd">          vanilla numpy array containing the data</span>
<span class="sd">          size : int</span>
<span class="sd">          Number of discretisation nodes</span>
<span class="sd">          &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
        <span class="nd">@staticmethod</span>
<div class="viewcode-block" id="BaseFields.factory"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.fields.BaseFields.factory">[docs]</a>        <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">dependent_variables</span><span class="p">,</span> <span class="n">helper_functions</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;Fields factory generating specialized container build around a</span>
<span class="sd">              triflow Model.</span>

<span class="sd">              Parameters</span>
<span class="sd">              ----------</span>
<span class="sd">              dependent_variables : iterable of str</span>
<span class="sd">                  name of the dependent variables</span>
<span class="sd">              helper_functions : iterable of str</span>
<span class="sd">                  name of the helper functions</span>

<span class="sd">              Returns</span>
<span class="sd">              -------</span>
<span class="sd">              triflow.BaseFields</span>
<span class="sd">                  Specialized container which expose the data as a structured numpy array</span>
<span class="sd">              &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
            <span class="n">Field</span> <span class="o">=</span> <span class="n">BaseFields</span>
            <span class="n">Field</span><span class="o">.</span><span class="n">dependent_variables</span> <span class="o">=</span> <span class="n">dependent_variables</span>
            <span class="n">Field</span><span class="o">.</span><span class="n">helper_functions</span> <span class="o">=</span> <span class="n">helper_functions</span>
            <span class="k">return</span> <span class="n">Field</span></div>

        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">inputs</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_keys</span> <span class="o">=</span> <span class="p">([</span><span class="s1">&#39;x&#39;</span><span class="p">]</span> <span class="o">+</span>
                          <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dependent_variables</span><span class="p">)</span> <span class="o">+</span>
                          <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">helper_functions</span><span class="p">))</span>
            <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">inputs</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_keys</span><span class="p">)]</span>

            <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>

            <span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">var</span><span class="p">)</span>
                              <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_keys</span><span class="p">]))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_dtype</span> <span class="o">=</span> <span class="p">[(</span><span class="n">var</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_keys</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_keys</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">structured</span><span class="p">[</span><span class="n">var</span><span class="p">]</span><span class="o">.</span><span class="n">squeeze</span><span class="p">())</span>

        <span class="nd">@property</span>
        <span class="k">def</span> <span class="nf">flat</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;return a flat view of the fields</span>

<span class="sd">              Returns: numpy.ndarray.view: flat view of the main numpy array</span>
<span class="sd">              &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>

        <span class="nd">@property</span>
        <span class="k">def</span> <span class="nf">structured</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;return a structured array of the main numpy array as a view</span>

<span class="sd">              Returns: numpy.ndarray.view: structured view of the main numpy array</span>
<span class="sd">              &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="n">dtype</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_dtype</span><span class="p">)</span>

        <span class="nd">@property</span>
        <span class="k">def</span> <span class="nf">uarray</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;return a view array of the main numpy array with only the</span>
<span class="sd">              dependant variables.</span>

<span class="sd">              Returns: numpy.ndarray.view: view of the dependent variables of the main numpy array</span>
<span class="sd">              &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dependent_variables</span><span class="p">))]</span>

        <span class="nd">@property</span>
        <span class="k">def</span> <span class="nf">uflat</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;return a flatten **copy** of the main numpy array with only the</span>
<span class="sd">              dependant variables.</span>

<span class="sd">              Be carefull, modification of these data will not be reflected on</span>
<span class="sd">              the main array!</span>

<span class="sd">              Returns: numpy.ndarray: **copy** of the dependent variables of the main numpy array</span>
<span class="sd">              &quot;&quot;&quot;</span>  <span class="c1"># noqa</span>
            <span class="n">uflat</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span>
                                      <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dependent_variables</span><span class="p">))]</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>
            <span class="n">uflat</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">writeable</span> <span class="o">=</span> <span class="kc">False</span>
            <span class="k">return</span> <span class="n">uflat</span>

<div class="viewcode-block" id="BaseFields.fill"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.fields.BaseFields.fill">[docs]</a>        <span class="k">def</span> <span class="nf">fill</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Uflat</span><span class="p">):</span>
            <span class="sd">&quot;&quot;&quot;take a flat numpy array and update inplace the dependent</span>
<span class="sd">            variables of the container</span>

<span class="sd">            Returns</span>
<span class="sd">            -------</span>
<span class="sd">            None</span>

<span class="sd">            Parameters</span>
<span class="sd">            ----------</span>
<span class="sd">            Uflat : TYPE</span>
<span class="sd">                Description</span>
<span class="sd">            &quot;&quot;&quot;</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">uarray</span><span class="p">[:]</span> <span class="o">=</span> <span class="n">Uflat</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">uarray</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span></div>

        <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">structured</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">.</span><span class="n">squeeze</span><span class="p">()</span>

        <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">))</span>

<div class="viewcode-block" id="BaseFields.copy"><a class="viewcode-back" href="../../../triflow.core.xhtml#triflow.core.fields.BaseFields.copy">[docs]</a>        <span class="k">def</span> <span class="nf">copy</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="n">old_values</span> <span class="o">=</span> <span class="p">{</span><span class="n">var</span><span class="p">:</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">var</span><span class="p">)</span><span class="o">.</span><span class="n">squeeze</span><span class="p">()</span>
                          <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_keys</span><span class="p">}</span>

            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span><span class="p">(</span><span class="o">**</span><span class="n">old_values</span><span class="p">)</span></div>

        <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">structured</span><span class="o">.</span><span class="fm">__repr__</span><span class="p">()</span></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>